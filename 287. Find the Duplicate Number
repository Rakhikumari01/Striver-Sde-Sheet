class Solution {
    public int findDuplicate(int[] nums) {
        
       // tortoise method TC: O(N),SC;O(1)
       //like linked list slow and fast pointer we move slow pointer one place and fast pointer two places
       //when they meet first time we place first pointer to first place
       //and then  move the first pointer and slow pointer by one place
       //and when they meet again we return slow pointer.

    int slow = nums[0];
    int fast = nums[0];

do{
    slow = nums[slow];
    fast = nums[nums[fast]];
}while(slow!=fast);

fast = nums[0];
while(slow!=fast)
{
    slow = nums[slow];
    fast=  nums[fast];
}

return slow;


    }
}


// brute force approach

class Solution {
    public int findDuplicate(int[] nums) {

        Arrays.sort(nums);
       int ans =0;
        for(int i=1;i<nums.length;i++)
        {
            if(nums[i]==nums[i-1])
              ans = nums[i];
        }
return ans;
        
        
    }
}

//using hfrequency array

class Solution {
    public int findDuplicate(int[] nums) {

        //optimal solution TC: O(N) SC: O(N)
        int n = nums.length;
        int fre [] = new int [n+1];

        for(int i=0;i<n;i++)
        {
            if(fre[nums[i]]==0)
            {
             fre[nums[i]]+= 1;
            }

            else{
                return nums[i];
            }
        }
        return 0;
    }
}
